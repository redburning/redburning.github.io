<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SunshineDxiao&#39;s Blog</title>
  
  <subtitle>一个有情怀的攻城狮，将搬砖进行到底！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.douxiao.org/"/>
  <updated>2018-05-30T14:04:07.000Z</updated>
  <id>http://www.douxiao.org/</id>
  
  <author>
    <name>SunshineDxiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用pyqt5构建人脸识别界面</title>
    <link href="http://www.douxiao.org/2018/03/12/%E7%94%A8pyqt5%E6%9E%84%E5%BB%BA%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E7%95%8C%E9%9D%A2/"/>
    <id>http://www.douxiao.org/2018/03/12/用pyqt5构建人脸识别界面/</id>
    <published>2018-03-12T01:00:38.000Z</published>
    <updated>2018-05-30T14:04:07.000Z</updated>
    
    <content type="html"><![CDATA[<font size="5" color="lightseagreen">  这篇博客是总结之前用Pyqt5、dlib、opencv实现的一个实时人脸识别同时具有人脸录入功能的软件，后续还会增加基于深度学习的人脸识别功能。</font><a id="more"></a><h1 id="一、效果视频"><a href="#一、效果视频" class="headerlink" title="一、效果视频"></a>一、效果视频</h1><div style="max-width:960px; margin:0 auto 10px;"><br><div style="position: relative;width:100%;padding-bottom:56.25%;height:0;"><br><iframe style="position: absolute;top: 0;left: 0;width: 100%;height: 100%;" src="http://player.youku.com/embed/XMzQ2NDg1NDIxNg==" frameborder="0" allowfullscreen></iframe><br></div><br></div><h1 id="二、源码解析"><a href="#二、源码解析" class="headerlink" title="二、源码解析"></a>二、源码解析</h1><h2 id="1、UI布局"><a href="#1、UI布局" class="headerlink" title="1、UI布局"></a>1、UI布局</h2><p>　　该软件界面只是使用了简单的UI界面，包括按键QPushButton、显示视屏是用的QLabel不断刷新图片来显示视频，录入姓名是用的QTextEdit。<br>  <a href="https://zhuanlan.zhihu.com/xdbcb8" target="_blank" rel="noopener">参考PyQT教程：</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_ui</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 布局设置</span></span><br><span class="line">    self.layout_main = QHBoxLayout()  <span class="comment"># 整体框架是水平布局</span></span><br><span class="line">    self.layout_button = QVBoxLayout()  <span class="comment"># 按键布局是垂直布局</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按钮设置</span></span><br><span class="line">    self.btn_open_cam = QPushButton(<span class="string">'打开相机'</span>)</span><br><span class="line">    self.btn_photo = QPushButton(<span class="string">'拍照'</span>)</span><br><span class="line">    self.btn_input_name = QPushButton(<span class="string">'录入人名'</span>)</span><br><span class="line">    self.btn_detection_face = QPushButton(<span class="string">'人脸检测'</span>)</span><br><span class="line">    self.btn_recognition_face = QPushButton(<span class="string">'人脸识别'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    self.btn_quit = QPushButton(<span class="string">'退出'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示视频</span></span><br><span class="line">    self.label_show_camera = QLabel()</span><br><span class="line">    self.label_move = QLabel()</span><br><span class="line">    self.label_move.setFixedSize(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">    <span class="comment"># 显示文本框</span></span><br><span class="line">    self.text = QTextEdit(self)</span><br><span class="line"></span><br><span class="line">    self.label_show_camera.setFixedSize(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line">    self.label_show_camera.setAutoFillBackground(<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 布局</span></span><br><span class="line">    self.layout_button.addWidget(self.btn_open_cam)</span><br><span class="line">    self.layout_button.addWidget(self.btn_photo)</span><br><span class="line">    self.layout_button.addWidget(self.btn_input_name)</span><br><span class="line">    self.layout_button.addWidget(self.btn_detection_face)</span><br><span class="line">    self.layout_button.addWidget(self.btn_recognition_face)</span><br><span class="line">    self.layout_button.addWidget(self.btn_quit)</span><br><span class="line">    self.layout_button.addWidget(self.label_move)</span><br><span class="line">    self.layout_button.addWidget(self.text)</span><br><span class="line"></span><br><span class="line">    self.layout_main.addLayout(self.layout_button)</span><br><span class="line">    self.layout_main.addWidget(self.label_show_camera)</span><br><span class="line"></span><br><span class="line">    self.setLayout(self.layout_main)</span><br><span class="line">    self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">600</span>, <span class="number">400</span>)</span><br><span class="line">    self.setWindowTitle(<span class="string">"人脸识别软件"</span>)</span><br></pre></td></tr></table></figure></p><h2 id="2、按键函数介绍"><a href="#2、按键函数介绍" class="headerlink" title="2、按键函数介绍"></a>2、按键函数介绍</h2><p>　　<font size="5" color="red"><strong>注意：不同按键切换前需要关闭当前功能。否则操作会出现错误。</strong></font></p><h3 id="1-def-btn-open-cam-click-self"><a href="#1-def-btn-open-cam-click-self" class="headerlink" title="1) def btn_open_cam_click(self)"></a>1) def btn_open_cam_click(self)</h3><p>　　打开摄像头函数 btn_open_cam_click(self)，该函数主要是用来打开和关闭摄像头，具体是开启摄像头界面刷新定时器timer_camera.start(30),30ms出发一次信号槽， <code>self.timer_camera.timeout.connect(self.show_camera)</code>同时检查摄像头是否正确连接摄像头，如果没有会弹出一个消息提示框。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">btn_open_cam_click</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.timer_camera.isActive() == <span class="keyword">False</span>:</span><br><span class="line">        flag = self.cap.open(self.cap_num)</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="keyword">False</span>:</span><br><span class="line">            msg = QMessageBox.warning(self, <span class="string">u"Warning"</span>, <span class="string">u"请检测相机与电脑是否连接正确"</span>, buttons=QMessageBox.Ok,</span><br><span class="line">                                      defaultButton=QMessageBox.Ok)</span><br><span class="line">        <span class="comment"># if msg==QtGui.QMessageBox.Cancel:</span></span><br><span class="line">        <span class="comment">#                     pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.timer_camera.start(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">            self.btn_open_cam.setText(<span class="string">u'关闭相机'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.timer_camera.stop()</span><br><span class="line">        self.cap.release()</span><br><span class="line">        self.label_show_camera.clear()</span><br><span class="line">        self.btn_open_cam.setText(<span class="string">u'打开相机'</span>)</span><br></pre></td></tr></table></figure><h3 id="2-def-show-camera-self"><a href="#2-def-show-camera-self" class="headerlink" title="2) def show_camera(self):"></a>2) def show_camera(self):</h3><p>　　摄像头显示函数，该函数也相当于主函数了，这里有个很重要的变量<code>self.btn_flag</code>该变量用来切换按钮不同的模式，有打开、关闭摄像头、人脸检测、人脸识别等功能。<br>　　第一是加载人脸级联分类器haarcascade_frontalface_default.xml，该分类器是检测人脸用的分类器。其实该分类器在人脸识别中并未用到。只是在人脸检测中用到。<br>　　第二是需要用将图片转化才能在QT界面中显示，<code>self.showImage = QImage(show.data, show.shape[1], show.shape[0], QImage.Format_RGB888)</code><br>　　<font color="red">第三是人脸识别功能要开启线程，这在同时识别多个人时特别关键，特别将是检测不同人脸，并标定不同标签来识别人，放在了不同的线程中。</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_camera</span><span class="params">(self)</span>:</span></span><br><span class="line">    harr_filepath = cv2.data.haarcascades + <span class="string">"haarcascade_frontalface_default.xml"</span>  <span class="comment"># 系统安装的是opencv-contrib-python</span></span><br><span class="line">    classifier = cv2.CascadeClassifier(harr_filepath)  <span class="comment"># 加载人脸特征分类器</span></span><br><span class="line">    <span class="keyword">if</span> self.btn_flag == <span class="number">0</span>:</span><br><span class="line">        ret, self.image = self.cap.read()</span><br><span class="line">        show = cv2.resize(self.image, (<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">        show = cv2.cvtColor(show, cv2.COLOR_BGR2RGB)  <span class="comment"># 这里指的是显示原图</span></span><br><span class="line">        <span class="comment"># opencv 读取图片的样式，不能通过Qlabel进行显示，需要转换为Qimage QImage(uchar * data, int width,</span></span><br><span class="line">        <span class="comment"># int height, Format format, QImageCleanupFunction cleanupFunction = 0, void *cleanupInfo = 0)</span></span><br><span class="line">        self.showImage = QImage(show.data, show.shape[<span class="number">1</span>], show.shape[<span class="number">0</span>], QImage.Format_RGB888)</span><br><span class="line">        self.label_show_camera.setPixmap(QPixmap.fromImage(self.showImage))</span><br><span class="line">    <span class="keyword">elif</span> self.btn_flag == <span class="number">1</span>:  <span class="comment"># 人脸检测</span></span><br><span class="line">        ret_1, self.image_1 = self.cap.read()</span><br><span class="line">        show_0 = cv2.resize(self.image_1, (<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">        show_1 = cv2.cvtColor(show_0, cv2.COLOR_BGR2RGB)</span><br><span class="line">        gray_image = cv2.cvtColor(show_0, cv2.COLOR_BGR2GRAY)</span><br><span class="line">        faces = classifier.detectMultiScale(gray_image, <span class="number">1.3</span>, <span class="number">5</span>)  <span class="comment"># 1.3和5是特征的最小、最大检测窗口，它改变检测结果也会改变</span></span><br><span class="line">        <span class="keyword">for</span> (x, y, w, h) <span class="keyword">in</span> faces:</span><br><span class="line">            cv2.rectangle(show_1, (x, y), (x + w, y + h), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)  <span class="comment"># 画出人脸</span></span><br><span class="line">        detect_image = QImage(show_1.data, show_1.shape[<span class="number">1</span>], show_1.shape[<span class="number">0</span>],</span><br><span class="line">                              QImage.Format_RGB888)</span><br><span class="line">        self.label_show_camera.setPixmap(QPixmap.fromImage(detect_image))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> self.btn_flag == <span class="number">2</span>:  <span class="comment"># 人脸识别</span></span><br><span class="line">        ret_2, self.image_2 = self.cap.read()</span><br><span class="line">        show_2 = cv2.resize(self.image_2, (<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">        self.show_3 = cv2.cvtColor(show_2, cv2.COLOR_BGR2RGB)</span><br><span class="line">        gray_image = cv2.cvtColor(show_2, cv2.COLOR_BGR2GRAY)</span><br><span class="line">        self.dets = self.detector(gray_image, <span class="number">1</span>)  <span class="comment"># 对视频中的人脸进行标定</span></span><br><span class="line">        self.dist = []  <span class="comment"># 声明一个数组</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> len(self.dets):</span><br><span class="line">            <span class="comment"># print('Can`t get face.')</span></span><br><span class="line">            detect_image = QImage(self.show_3.data, self.show_3.shape[<span class="number">1</span>], self.show_3.shape[<span class="number">0</span>],</span><br><span class="line">                                  QImage.Format_RGB888)</span><br><span class="line">            self.label_show_camera.setPixmap(QPixmap.fromImage(detect_image))</span><br><span class="line">        <span class="comment"># 这里开启了一个人脸识别的线程，会自动为for循环分配线程，这里为进一步在同一个视频中，识别不同的人脸准备</span></span><br><span class="line">        t = threading.Thread(target=self.face_thread, name=<span class="string">'Face_Thread'</span>)</span><br><span class="line">        t.start()</span><br><span class="line">        t.join()</span><br></pre></td></tr></table></figure><h3 id="3-def-face-thread-self"><a href="#3-def-face-thread-self" class="headerlink" title="3) def face_thread(self):"></a>3) def face_thread(self):</h3><p>　　线程函数中特别重要是一点是，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算欧式距离</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> self.descriptors:  <span class="comment"># 遍历之前提取的候选人的128D向量</span></span><br><span class="line">     <span class="comment"># 计算欧式距离，有多少个候选人就有多少个距离,放到dist数组中。</span></span><br><span class="line">     dist_ = np.linalg.norm(i - d_test)</span><br><span class="line">     self.dist.append(dist_)</span><br><span class="line">     <span class="comment"># 候选人和距离组成一个dict字典</span></span><br><span class="line">     c_d = dict(zip(self.candidate, self.dist))</span><br><span class="line"><span class="comment">#注意这里必须把dist[]之前的数据pop出去，才能确保每次不同线程计算的不同人的向量。从而不同线程识别不同的人。</span></span><br><span class="line"><span class="comment">#因为pop()只是把list中的最后一个pop出去，所以需要一个循环。</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(self.candidate)):</span><br><span class="line">    self.dist.pop()</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">face_thread</span><span class="params">(self)</span>:</span>  <span class="comment"># 这里多线程是解决，同时识别不同人脸的关键</span></span><br><span class="line"></span><br><span class="line">       print(<span class="string">'thread %s is running...'</span> % threading.current_thread().name)</span><br><span class="line">       <span class="keyword">for</span> k, face <span class="keyword">in</span> enumerate(self.dets):  <span class="comment"># 遍历视频中所有人脸 ，</span></span><br><span class="line"></span><br><span class="line">           print(<span class="string">'thread %s &gt;&gt;&gt; %s'</span> % (threading.current_thread().name, k))</span><br><span class="line">           shape = self.landmark(self.show_3, face)  <span class="comment"># 检测人脸特征点</span></span><br><span class="line">           face_descriptor = self.facerec.compute_face_descriptor(self.show_3, shape)  <span class="comment"># 计算人脸的128D向量</span></span><br><span class="line">           d_test = np.array(face_descriptor)</span><br><span class="line">           x1 = face.top() <span class="keyword">if</span> face.top() &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">           y1 = face.bottom() <span class="keyword">if</span> face.bottom() &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">           x2 = face.left() <span class="keyword">if</span> face.left() &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">           y2 = face.right() <span class="keyword">if</span> face.right() &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">           cv2.rectangle(self.show_3, (x2, x1), (y2, y1), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>)</span><br><span class="line">           <span class="comment"># print(x2, x1, y2, y1)</span></span><br><span class="line">           <span class="comment"># 计算欧式距离</span></span><br><span class="line">           <span class="keyword">for</span> i <span class="keyword">in</span> self.descriptors:  <span class="comment"># 遍历之前提取的候选人的128D向量</span></span><br><span class="line">               dist_ = np.linalg.norm(i - d_test)  <span class="comment"># 计算欧式距离，有多少个候选人就有多少个距离,放到dist数组中。</span></span><br><span class="line">               self.dist.append(dist_)</span><br><span class="line">               <span class="comment"># 候选人和距离组成一个dict字典</span></span><br><span class="line">           c_d = dict(zip(self.candidate, self.dist))</span><br><span class="line">           <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(self.candidate)):  <span class="comment"># 注意这里必须把dist[]之前的数据pop出去，才能确保每次不同线程计算的不同人的向量。</span></span><br><span class="line">               self.dist.pop()</span><br><span class="line">           <span class="comment"># sorted将dict字典中数排序，按key顺序（第二个关键字）</span></span><br><span class="line">           cd_sorted = sorted(c_d.items(), key=<span class="keyword">lambda</span> d: d[<span class="number">1</span>])</span><br><span class="line">           <span class="keyword">if</span> cd_sorted[<span class="number">0</span>][<span class="number">1</span>] &gt; <span class="number">0.32</span>:</span><br><span class="line">               cv2.putText(self.show_3, <span class="string">'Unknown'</span>, (x2, x1), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">1.0</span>,</span><br><span class="line">                           (<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               cv2.putText(self.show_3, cd_sorted[<span class="number">0</span>][<span class="number">0</span>], (x2, x1), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">1.0</span>,</span><br><span class="line">                       (<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">           <span class="comment"># 各参数依次是：照片/添加的文字/左上角坐标/字体/字体大小/颜色/字体粗细</span></span><br><span class="line">           print(<span class="string">"\n The person is: "</span>, cd_sorted[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">           detect_image = QImage(self.show_3.data, self.show_3.shape[<span class="number">1</span>], self.show_3.shape[<span class="number">0</span>],</span><br><span class="line">                                 QImage.Format_RGB888)</span><br><span class="line">           self.label_show_camera.setPixmap(QPixmap.fromImage(detect_image))</span><br></pre></td></tr></table></figure><h3 id="4-def-photo-face-self"><a href="#4-def-photo-face-self" class="headerlink" title="4) def photo_face(self):"></a>4) def photo_face(self):</h3><p>　 拍照函数：以系统当前时间命名。使用的是<code>datetime.now().strftime(&quot;%Y%m%d%H%M%S&quot;)</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">photo_face</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># photo_save_path = '/home/dx/Desktop/detect_face_pyqt5/candidate-faces'</span></span><br><span class="line"></span><br><span class="line">    photo_save_path = os.path.join(os.path.dirname(os.path.abspath(<span class="string">'__file__'</span>)),</span><br><span class="line">                                   <span class="string">'candidate-faces/'</span>)</span><br><span class="line">    <span class="comment"># self.time_flag.append(datetime.now().strftime("%Y%m%d%H%M%S"))</span></span><br><span class="line">    self.showImage.save(photo_save_path + datetime.now().strftime(<span class="string">"%Y%m%d%H%M%S"</span>) + <span class="string">".jpg"</span>)</span><br><span class="line">    QMessageBox.information(self, <span class="string">"Information"</span>,</span><br><span class="line">                            self.tr(<span class="string">"拍照成功!"</span>))</span><br></pre></td></tr></table></figure></p><h3 id="5-def-input-name-self"><a href="#5-def-input-name-self" class="headerlink" title="5) def input_name(self):"></a>5) def input_name(self):</h3><p>　　实现功能是录入人名，保存人名到name.txt文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_name</span><span class="params">(self)</span>:</span></span><br><span class="line">    name_path = os.path.join(os.path.dirname(os.path.abspath(<span class="string">'__file__'</span>)),  <span class="comment"># 将人名文件放在candidate-faces文件夹下</span></span><br><span class="line">                             <span class="string">'candidate-faces/'</span>)</span><br><span class="line">    file_name_path = os.path.join(self.faces_folder_path, <span class="string">'name.txt'</span>)</span><br><span class="line">    <span class="keyword">if</span> self.input_flag == <span class="number">0</span>:</span><br><span class="line">        self.input_flag = <span class="number">1</span></span><br><span class="line">        self.fname = QFileDialog.getOpenFileName(self, <span class="string">'打开文件'</span>, name_path, <span class="string">"Text Files(*.txt)"</span>)</span><br><span class="line">        <span class="keyword">if</span> self.fname[<span class="number">0</span>]:  <span class="comment"># self.fname[0] 是/home/dx/Desktop/detect_face_pyqt5/candidate-faces/name.txt</span></span><br><span class="line">            <span class="keyword">with</span> open(self.fname[<span class="number">0</span>], <span class="string">'r'</span>, encoding=<span class="string">'gb18030'</span>, errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                self.text.setText(f.read())</span><br><span class="line">        self.btn_input_name.setText(<span class="string">'保存人名'</span>)</span><br><span class="line">    <span class="keyword">elif</span> self.input_flag == <span class="number">1</span>:</span><br><span class="line">        self.input_flag = <span class="number">0</span></span><br><span class="line">        self.cont = self.text.toPlainText()  <span class="comment"># 获取文本框内容</span></span><br><span class="line">        f = open(file_name_path, <span class="string">'w'</span>)</span><br><span class="line">        f.write(self.cont)</span><br><span class="line">        <span class="comment">#print(self.cont)</span></span><br><span class="line">        self.btn_input_name.setText(<span class="string">'录入人名'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="6-dlib-para-init-self-def-readfile-self"><a href="#6-dlib-para-init-self-def-readfile-self" class="headerlink" title="6) dlib_para_init(self): def readfile(self):"></a>6) dlib_para_init(self): def readfile(self):</h3><p>　<br>　　该函数作用是加载，人脸特征提取器，人脸识别分类，同时加载候选人文件夹，从name.txt加载候选人信息，并按照时间顺序排序，这里很关键。这样才能把照片和人名有序的联系起来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 人脸关键点检测器</span></span><br><span class="line">        <span class="comment">#  face_landmark_path    = '/home/dx/Desktop/detect_face_pyqt5/shape_predictor_68_face_landmarks.dat'</span></span><br><span class="line">        face_landmark_path = os.path.join(os.path.dirname(os.path.abspath(<span class="string">'__file__'</span>)),</span><br><span class="line">                                          <span class="string">'shape_predictor_68_face_landmarks.dat'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 人脸识别模型</span></span><br><span class="line">        <span class="comment">#  face_recognize_path   = '/home/dx/Desktop/detect_face_pyqt5/dlib_face_recognition_resnet_model_v1.dat'</span></span><br><span class="line">        face_recognize_path = os.path.join(os.path.dirname(os.path.abspath(<span class="string">'__file__'</span>)),</span><br><span class="line">                                           <span class="string">'dlib_face_recognition_resnet_model_v1.dat'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 候选人文件夹</span></span><br><span class="line">        <span class="comment">#  faces_folder_path     = '/home/dx/Desktop/detect_face_pyqt5/candidate-faces'</span></span><br><span class="line">        self.faces_folder_path = os.path.join(os.path.dirname(os.path.abspath(<span class="string">'__file__'</span>)),</span><br><span class="line">                                         <span class="string">'candidate-faces/'</span>)</span><br><span class="line">        <span class="comment"># 1.加载正脸检测器</span></span><br><span class="line">        self.detector = dlib.get_frontal_face_detector()</span><br><span class="line">        <span class="comment"># 2.加载人脸关键点检测器</span></span><br><span class="line">        self.landmark = dlib.shape_predictor(face_landmark_path)</span><br><span class="line">        <span class="comment"># 3. 加载人脸识别模型</span></span><br><span class="line">        self.facerec = dlib.face_recognition_model_v1(face_recognize_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 候选人脸描述子list</span></span><br><span class="line">        self.descriptors = []</span><br><span class="line">        <span class="comment"># 对文件夹下的每一个人脸进行:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1.人脸检测</span></span><br><span class="line">        <span class="comment"># 2.关键点检测</span></span><br><span class="line">        <span class="comment"># 3.描述子提取</span></span><br><span class="line">        time_flag = []  <span class="comment"># 获取照片中时间</span></span><br><span class="line">        file_glob = os.path.join(self.faces_folder_path, <span class="string">"*.jpg"</span>)</span><br><span class="line">        file_list = []</span><br><span class="line">        file_list.extend(glob.glob(file_glob))</span><br><span class="line">        print(file_list)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(file_list)):</span><br><span class="line">            tmp = str(file_list[i])</span><br><span class="line">            tmp_1 = tmp[<span class="number">51</span>:<span class="number">65</span>]  <span class="comment"># 截取字符串,截取时间</span></span><br><span class="line">            time_flag.append(tmp_1)</span><br><span class="line">        <span class="comment"># print(time_flag)</span></span><br><span class="line">        cand_d = dict(zip(file_list, time_flag))</span><br><span class="line">        cand_sorted = sorted(cand_d.items(), key=<span class="keyword">lambda</span> d: d[<span class="number">1</span>])  <span class="comment"># 按字典的第二个关键字排序</span></span><br><span class="line">        <span class="comment"># print(cand_sorted)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> range(<span class="number">0</span>, len(cand_sorted)):</span><br><span class="line"></span><br><span class="line">            print(<span class="string">"Processing file: &#123;&#125;"</span>.format(cand_sorted[f][<span class="number">0</span>]))</span><br><span class="line">            self.img = io.imread(cand_sorted[f][<span class="number">0</span>])</span><br><span class="line">            <span class="comment"># win.clear_overlay()</span></span><br><span class="line">            <span class="comment"># win.set_image(img)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 1.人脸检测</span></span><br><span class="line">            dets = self.detector(self.img, <span class="number">1</span>)  <span class="comment"># 人脸标定</span></span><br><span class="line">            print(<span class="string">"Number of faces detected: &#123;&#125;"</span>.format(len(dets)))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> k, d <span class="keyword">in</span> enumerate(dets):</span><br><span class="line">                <span class="comment"># 2.关键点检测</span></span><br><span class="line">                shape = self.landmark(self.img, d)</span><br><span class="line">                <span class="comment"># 画出人脸区域和和关键点</span></span><br><span class="line">                <span class="comment"># win.clear_overlay()</span></span><br><span class="line">                <span class="comment"># win.add_overlay(d)</span></span><br><span class="line">                <span class="comment"># win.add_overlay(shape)</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 3.描述子提取，128D向量</span></span><br><span class="line">                face_descriptor = self.facerec.compute_face_descriptor(self.img, shape)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 转换为numpy array</span></span><br><span class="line">                v = np.array(face_descriptor)</span><br><span class="line">                self.descriptors.append(v)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对需识别人脸进行同样处理</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提取描述子，不再注释</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 候选人名单</span></span><br><span class="line"></span><br><span class="line">       <span class="comment"># self.candidate = ['dwh', 'whr', 'zjr', 'dx', 'dx', 'whr', 'dx']</span></span><br><span class="line">        self.candidate = self.readfile()  <span class="comment"># 读取候选人,从name.txt中</span></span><br><span class="line">        print(self.candidate)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readfile</span><span class="params">(self)</span>:</span></span><br><span class="line">        file_name_path = os.path.join(self.faces_folder_path, <span class="string">'name.txt'</span>)</span><br><span class="line">        <span class="keyword">with</span> open(file_name_path, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            content = f.read().splitlines()  <span class="comment"># 去掉行尾的换行符\n 并保存为list</span></span><br><span class="line">            <span class="comment">#content = [line.rstrip('\n') for line in f]</span></span><br><span class="line">            <span class="keyword">return</span> content</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;font size=&quot;5&quot; color=&quot;lightseagreen&quot;&gt;  这篇博客是总结之前用Pyqt5、dlib、opencv实现的一个实时人脸识别同时具有人脸录入功能的软件，后续还会增加基于深度学习的人脸识别功能。&lt;/font&gt;
    
    </summary>
    
      <category term="工作" scheme="http://www.douxiao.org/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="pyqt5" scheme="http://www.douxiao.org/tags/pyqt5/"/>
    
      <category term="dlib" scheme="http://www.douxiao.org/tags/dlib/"/>
    
  </entry>
  
  <entry>
    <title>搭建Hexo+github博客(二)</title>
    <link href="http://www.douxiao.org/2017/09/23/%E6%90%AD%E5%BB%BAHexo-github%E5%8D%9A%E5%AE%A2-1/"/>
    <id>http://www.douxiao.org/2017/09/23/搭建Hexo-github博客-1/</id>
    <published>2017-09-23T14:31:56.000Z</published>
    <updated>2018-05-30T14:04:07.000Z</updated>
    
    <content type="html"><![CDATA[<font size="5" color="darkturquoise"> 如何在不同电脑上同时写hexo博客？</font><br><a id="more"></a><br><br><font size="5">前言</font><p> 　　Hexo通过将Markdown文件编译成html文件，然后将html文件直接部署到网站上，所以被称作静态博客，因为直接就是访问的最终的html文件，不会有PHP那样的中间处理，所以对浏览器来讲会比较快。但是这样在不同的电脑上写博客的时候，从github上pull下来，只能够得到一些静态页面，而且没有源md文件,所以在每次提交博客部署的时候，就会把原来的博客清空。<br>  　　为了完美解决这个问题，可以<strong>利用github的不同分支来分别保存网站静态文件与hexo源码（md原始文件及主题等）</strong>，实现在不同电脑上都可以自由写博客，这样不好之处就是别人能得到你的博客源文件。<br>　　<br>　　<strong>   注：假设你有工作PC和个人PC，你原有的博客搭建在个人PC上，以下首先介绍个人PC上的操作步骤。</strong></p><h1 id="个人PC"><a href="#个人PC" class="headerlink" title="个人PC"></a><font size="5">个人PC</font></h1><h2 id="在github上新建远程仓库"><a href="#在github上新建远程仓库" class="headerlink" title=" 在github上新建远程仓库"></a><font size="4" color="darkturquoise"> 在github上新建远程仓库</font></h2><p>　　将原来的page项目删除，新建一个和原来名字一样的空项目。不用初始README.md，此时只有一个空的master分支。<br>　　<strong>本地的目录不要动</strong>，到时候需要用你原来博客的配置和文章替换该项目中的文件夹。你可以把你本地的博客目录复制一份作为备份，以免误操作将原来的内容进行改动。</p><h2 id="本地初始化一个Hexo项目"><a href="#本地初始化一个Hexo项目" class="headerlink" title=" 本地初始化一个Hexo项目"></a><font size="4" color="darkturquoise"> 本地初始化一个Hexo项目</font></h2><p>　</p><p>　　新建一个空目录，比如我的文件名为DxBlog,作为你的博客目录。进入该目录，执行以下命令:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm <span class="keyword">install</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure></p><p>　　然后用自己原来博客里的文件替换掉这里的<font color="red">source\ ,  scaffolds\ , themes\ , _config.yml </font> 替换成自己原来博客里的。注意，<strong>这里需要把themes/yelee中的.git/目录删除</strong>，因为在安装博客主题的时候是直接git下来的，会有原始的git信息，如果不删除的话，推送到hexo分支后yelee目录为空，自己的电脑是linux系统./git目录是看不到的　需要用命令行：<code>sudo rm -rf .git/</code>删除。<strong>还有如果之前更改过node_modules文件中的东西同样需要更改，比如球形标签云。</strong></p><h2 id="将整个目录推送到master"><a href="#将整个目录推送到master" class="headerlink" title=" 将整个目录推送到master"></a><font size="4" color="darkturquoise"> 将整个目录推送到master</font></h2><p></p><p>　　要推送到master分支，首先要将该目录初始化为本地Git仓库：<br>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line"><span class="comment">//把博客目录下所有文件推送到master分支</span></span><br><span class="line">git remote add origin git@github<span class="selector-class">.com</span>:douxiao/douxiao<span class="selector-class">.github</span><span class="selector-class">.io</span><span class="selector-class">.git</span></span><br><span class="line">git add .　<span class="comment">//添加当前工作目录文件到index</span></span><br><span class="line">git commit -m <span class="string">"some comments"</span> <span class="comment">//生成一个commit</span></span><br><span class="line">git push origin master     <span class="comment">//推送服务器</span></span><br></pre></td></tr></table></figure></p><h2 id="在github上新建一个分支"><a href="#在github上新建一个分支" class="headerlink" title=" 在github上新建一个分支"></a><font size="4" color="darkturquoise"> 在github上新建一个分支</font></h2><p></p><p>　　新建一个分支hexo(名字可以自定义)，这时候hexo分支和master分支的内容一样，都是hexo的源文件。<strong>并把hexo设为默认分支，这一步需要在你的库设置里完成</strong>，这样的话在另外一台机器上克隆下来就直接进入hexo分支，并且以后所有操作都是在hexo分支下完成。<br>　　为什么需要这个额外的分支呢？<br>　　因为<code>hexo d</code>只把静态网页文件部署到master分支上，所以你换了另外一台电脑，就无法pull下来继续写博客了。有了hexo分支的话，就可以把hexo分支中的源文件(配置文件、主题样式等)pull下来，再hexo g的话就可以生成一模一样的静态文件了。</p><h2 id="部署博客"><a href="#部署博客" class="headerlink" title=" 部署博客"></a><font size="4" color="darkturquoise"> 部署博客</font></h2><p>　<code>hexo g -d</code><br>　　博客已经成功部署到master分支，这时候到github查看两个分支的内容，hexo分支里是源文件，master里是静态文件。<br>　　<strong>注意：网站根目录下的_config.yml配置文件中branch一定要填master，否则hexo d就会部署到hexo分支下</strong></p><h2 id="关联到远程hexo分支"><a href="#关联到远程hexo分支" class="headerlink" title=" 关联到远程hexo分支"></a><font size="4" color="darkturquoise"> 关联到远程hexo分支</font></h2><p>　　在本地新建一个hexo分支并与远程hexo分支关联：<br>  <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -<span class="keyword">b </span>hexo</span><br><span class="line">git pull <span class="keyword">origin </span>hexo</span><br></pre></td></tr></table></figure></p><p>　　另外别忘了，如果有修改的话，要推送到hexo分支上去：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> .</span></span><br><span class="line"><span class="bash">git commit -m  <span class="string">""</span></span></span><br><span class="line"><span class="bash">git push origin hexo</span></span><br></pre></td></tr></table></figure></p><h1 id="工作PC"><a href="#工作PC" class="headerlink" title="工作PC"></a><font size="5">工作PC</font></h1><p>　　个人PC上的工作已经完成了，下面讲一下如果你换到了另外一台电脑上，应该如何操作。<br>　　将博客项目克隆下来,<font color="red"> 这里特别注意以后的操作需要在这个克隆下来的文件下操作，因为里面有git信息，在之后的git push才能正确完成，自己在这里踩坑了。</font><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github<span class="selector-class">.com</span>:douxiao/douxiao<span class="selector-class">.github</span><span class="selector-class">.io</span><span class="selector-class">.git</span></span><br></pre></td></tr></table></figure></p><p>　　克隆下来的仓库和你在个人PC中的目录是一模一样的，所以可以在这基础上继续写博客了。但是由于.gitignore文件中过滤了<strong>node_modules</strong>\，所以克隆下来的目录里没有node_modules\，这是hexo所需要的组件，所以要在该目录中重新安装hexo，但不需要hexo init。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g hexo-cli</span><br><span class="line">npm <span class="keyword">install</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure></p><p>　　<strong>注意：这里一般还需要安装一些一些必须的插件，就是说可靠像之前在个人pc上安装的那些插件一样。</strong></p><p>　　新建一篇文章测试<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">"work PC test"</span></span><br></pre></td></tr></table></figure></p><p>　　推送到hexo分支<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git init </span><br><span class="line">git <span class="keyword">add</span><span class="bash"> .</span></span><br><span class="line"><span class="bash">git commit -m <span class="string">"add work PC test"</span></span></span><br><span class="line"><span class="bash">git push origin hexo</span></span><br></pre></td></tr></table></figure></p><p>　　部署到master分支<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo g -d</span></span><br></pre></td></tr></table></figure></p><h1 id="日常操作"><a href="#日常操作" class="headerlink" title="日常操作"></a><font size="5">日常操作</font></h1><p>　　如果上面的过程都操作无误的话，你就可以在任何能联网的电脑上写博客啦。一般写博客的流程是下面这样。<br><strong>写博客前</strong><br>　　不管你本地的仓库是否是最新的，都先pull一下，以防万一：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git pull origin hexo</span></span><br></pre></td></tr></table></figure><p>　　<strong>在这里自己遇到的问题是</strong>：每次在git pull之前，需要执行命令 <code>git stash</code><br>执行完git pull后需要执行　｀git stash pop｀，<a href="http://blog.csdn.net/iefreer/article/details/7679631" target="_blank" rel="noopener">Git:代码冲突常见解决方法</a>，<a href="http://www.cppblog.com/deercoder/archive/2011/11/13/160007.aspx" target="_blank" rel="noopener">git stash用法</a><br>　　把最新的pull下来，再开始撰写新的博客。<br>　　写博客<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">"title"</span></span><br></pre></td></tr></table></figure></p><p>　　然后打开source/_posts/title.md，撰写博文。<br>　　写完博客<br>　　先推送到hexo分支上：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> .</span></span><br><span class="line"><span class="bash">git commit -m <span class="string">"add article xxx"</span></span></span><br><span class="line"><span class="bash">git push origin hexo</span></span><br></pre></td></tr></table></figure></p><p>　　<strong>在这里自己遇到的问题是</strong>：Git-Permission denied (publickey)解决办法因电脑而异。自行谷歌。</p><p>　　最后部署到master分支上：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo g -d</span></span><br></pre></td></tr></table></figure></p><h1 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a><font size="5">常见问题解决</font></h1><ol><li><a href="https://www.zhihu.com/question/28847824" target="_blank" rel="noopener">配置hexo 为什么运行到 hexo server 这步就没用了？</a></li><li><a href="http://hanhailong.com/2015/10/08/Hexo%E2%80%94%E6%AD%A3%E7%A1%AE%E6%B7%BB%E5%8A%A0RSS%E8%AE%A2%E9%98%85/" target="_blank" rel="noopener">Hexo—正确添加RSS订阅</a></li><li><a href="http://chown-jane-y.coding.me/2017/03/15/%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%8D%E5%90%8C%E7%94%B5%E8%84%91%E4%B8%8A%E5%90%8C%E6%97%B6%E5%86%99hexo%E5%8D%9A%E5%AE%A2%EF%BC%9F/" target="_blank" rel="noopener">如何在不同电脑上同时写hexo博客？</a></li><li><a href="http://blog.csdn.net/yemoweiliang/article/details/53215979" target="_blank" rel="noopener">删除本地SSH并新建一个ssh</a></li><li><a href="http://www.cnblogs.com/ayseeing/p/3572582.html" target="_blank" rel="noopener">在github上添加SSH key的步骤：</a></li><li><a href="https://stackoverflow.com/questions/2643502/git-permission-denied-publickey" target="_blank" rel="noopener">Git-Permission denied (publickey)</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;font size=&quot;5&quot; color=&quot;darkturquoise&quot;&gt; 如何在不同电脑上同时写hexo博客？&lt;/font&gt;&lt;br&gt;
    
    </summary>
    
      <category term="博客" scheme="http://www.douxiao.org/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="http://www.douxiao.org/tags/hexo/"/>
    
      <category term="github" scheme="http://www.douxiao.org/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>搭建Hexo+github博客(一)</title>
    <link href="http://www.douxiao.org/2017/09/23/%E6%90%AD%E5%BB%BAHexo-github%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.douxiao.org/2017/09/23/搭建Hexo-github博客/</id>
    <published>2017-09-23T11:58:24.000Z</published>
    <updated>2018-05-30T14:04:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<font size="5" color="lightseagreen"> 　这篇文章是总结自己的博客搭建之路，包括：初始识Hexo、配置博客的环境、初始化博客、域名申请、绑定域名、博客主题的选定、优化配置博客、markdown编辑器的选定、工作和个人笔记本同时写博客，工作电脑是linux系统，个人电脑是windows系统，这篇文章主要是按照Linux系统的安装布置博客。可能会分几篇博文来写。</font><br><a id="more"></a></p><h1 id="一、初识Hexo"><a href="#一、初识Hexo" class="headerlink" title="一、初识Hexo"></a><font size="5"><strong>一、初识Hexo</strong></font></h1><p>　　　<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo</a>是一款基于Node.js ，快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h1 id="二、安装Git环境"><a href="#二、安装Git环境" class="headerlink" title="二、安装Git环境"></a><font size="5"><strong>二、安装Git环境</strong></font></h1><p>　　　配置git前，需要到<a href="http://www.github.com" target="_blank" rel="noopener">github官网</a>注册自己的账号,然新建一个username.github.io的仓库。<br>　　　<a href="https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="noopener">git安装教程</a><br>　　　<a href="https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%88%9D%E6%AC%A1%E8%BF%90%E8%A1%8C-Git-%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">git配置教程</a><br>　　　<a href="https://git-scm.com/book/zh/v1/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5" target="_blank" rel="noopener">git生成ssh公钥</a><br>   <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global user.name <span class="string">"John Doe"</span></span><br><span class="line">$ git<span class="built_in"> config </span>--global user.email johndoe@example.com</span><br></pre></td></tr></table></figure></p><h1 id="三、安装Node-JS环境"><a href="#三、安装Node-JS环境" class="headerlink" title="三、安装Node.JS环境"></a><font size="5"><strong>三、安装Node.JS环境</strong></font></h1><p>  　　　1. <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.j安装下载地址</a><br>  　　　2. <a href="https://linux.cn/article-5766-1.html" target="_blank" rel="noopener">在Ubuntu下安装Node.JS的不同方式</a><br>  　　　3. 我使用的是按照命令行的方式，（如果是windows环境，直接下载软件安装就可以了，不过安装后需要重启电脑才能够生效）代码如下<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt-get install nodejs</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm -v</span></span><br><span class="line">   5.4.2</span><br><span class="line"><span class="meta">$</span><span class="bash"> npm -v</span></span><br><span class="line">v8.4.0</span><br></pre></td></tr></table></figure></p><p>注意：用命令行安装的版本一般不是很高，需要进行升级，升级教程:<a href="http://www.16boke.com/article/detail/26" target="_blank" rel="noopener">一行命令搞定node.js 版本升级</a></p><h1 id="四、安装Hexo"><a href="#四、安装Hexo" class="headerlink" title="四、安装Hexo"></a><font size="5"><strong>四、<a href="https://hexo.io/zh-cn/docs/setup.html" target="_blank" rel="noopener">安装Hexo</a></strong></font></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure><p>　　安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo new <span class="built_in">test</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g    <span class="comment">#生成静态文件</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s    <span class="comment"># 启动服务器。默认情况下，访问网址为： http://localhost:4000/。</span></span></span><br></pre></td></tr></table></figure></p><p>　　现在来介绍常用的Hexo 命令</p><p>　　npm install hexo -g #安装Hexo<br>　　npm update hexo -g #升级<br>　　hexo init #初始化博客<br>　<br>　　命令简写<br>　　hexo n “我的博客” == hexo new “我的博客” #新建文章<br>　　hexo g == hexo generate #生成<br>　　hexo s == hexo server #启动服务预览<br>　　hexo d == hexo deploy #部署</p><p>　　hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>　　hexo server -s #静态模式<br>　　hexo server -p 5000 #更改端口<br>　　hexo server -i 192.168.1.1 #自定义 IP<br>　　hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p><p><strong>部署推送网站</strong></p><p>　　下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：</p><p>　　deploy:<br>　　type: git<br>　　repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git<br>　　branch: master参考如下：<br>　　保存站点配置文件。</p><p>　　其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-deployer-git --save</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo clean </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d</span></span><br></pre></td></tr></table></figure><p>　　访问网站：usrname.github.io</p><h1 id="五、注册并绑定域名"><a href="#五、注册并绑定域名" class="headerlink" title="五、注册并绑定域名"></a><font size="5"><strong>五、<a href="http://www.jianshu.com/p/cea41e5c9b2a" target="_blank" rel="noopener">注册并绑定域名</a></strong></font></h1><p>　　<br> 　　<a href="http://www.douxiao.org">域名访问博客</a></p><h1 id="六、更换主题及优化"><a href="#六、更换主题及优化" class="headerlink" title="六、更换主题及优化"></a><font size="5"><strong>六、更换主题及优化</strong></font></h1><p>　1.博客默认的是landscape主题。<br>　2.自己使用了一段时间next,next主题挺不错的自己也配置了很久，<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">Next主题配置教程官网</a>，<a href="https://juejin.im/post/58eb2fd2a0bb9f006928f8c7" target="_blank" rel="noopener">Next主题优化</a>.<br>　3.自己使用的主题是Yelee主题。<br>  　　<a href="http://moxfive.coding.me/yelee/" target="_blank" rel="noopener">Yelee主题使用说明</a><br>  　　<a href="http://www.netcan666.com/2015/12/15/Hexo%E4%B8%AA%E6%80%A7%E5%8C%96%E7%90%83%E5%BD%A2%E6%A0%87%E7%AD%BE%E4%BA%91/#u6548_u679C_u56FE" target="_blank" rel="noopener">Yelee主题增加球形标签云</a><br>  　　<a href="http://ngudream.com/2017/01/24/n-hexo-blog/" target="_blank" rel="noopener">Yelee主题其他优化</a><br>　　<a href="http://www.flametao.cn/2017/01/29/wordcount/" target="_blank" rel="noopener">Yelee主题字数统计</a><br>　4.Yelee主题增加红心，鼠标点击小红心的设置<br>　　将 <a href="http://7u2ss1.com1.z0.glb.clouddn.com/love.js" target="_blank" rel="noopener">love.js</a> 文件下载添加到 hexo/themes/yelee/source/js 文件目录下。<br>　　找到 hexo/themes/yelee/layout/_partial/footer.ejs 文件， 在文件的最后， 添加以下代码：<br>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!--页面点击小红心--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/love.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>  　5.<a href="http://jomsou.me/2017/07/16/livere/" target="_blank" rel="noopener">增加来必力评论系统</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;font size=&quot;5&quot; color=&quot;lightseagreen&quot;&gt; 　这篇文章是总结自己的博客搭建之路，包括：初始识Hexo、配置博客的环境、初始化博客、域名申请、绑定域名、博客主题的选定、优化配置博客、markdown编辑器的选定、工作和个人笔记本同时写博客，工作电脑是linux系统，个人电脑是windows系统，这篇文章主要是按照Linux系统的安装布置博客。可能会分几篇博文来写。&lt;/font&gt;&lt;br&gt;
    
    </summary>
    
      <category term="博客" scheme="http://www.douxiao.org/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="http://www.douxiao.org/tags/hexo/"/>
    
      <category term="github" scheme="http://www.douxiao.org/tags/github/"/>
    
  </entry>
  
</feed>
